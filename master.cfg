# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [buildslave.BuildSlave("example-slave", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'http://github.com/deleonronet09/menipu.git',
        workdir='CI_test', branches='True',
        pollinterval=10))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build
from buildbot.schedulers import basic
from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.filter import ChangeFilter 
c['schedulers'] = []

#c['schedulers'].append(schedulers.SingleBranchScheduler(name="all",change_filter=util.ChangeFilter(branch=None),
#treeStableTimer=10,builderNames=["CI"],categories=))
c['schedulers'].append(AnyBranchScheduler(name="all", change_filter="util.ChangeFilter", treeStableTimer=1*30, builderNames=["CI"]))
c['schedulers'].append(schedulers.ForceScheduler(name="force",builderNames=["CI"]))

#change_filter = ChangeFilter(repository='https://github.com/deleonronet09/menipu', category='pull-requests')
#scheduler = basic.Scheduler("pull request builder", treeStableTimer=1, builderNames=['CI'], change_filter=change_filter)

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.steps.shell import ShellCommand
from buildbot.plugins import steps

factory = util.BuildFactory()

# STEPS for example-slave:
factory.addStep(steps.Git(repourl='git://github.com/deleonronet09/menipu.git', mode='incremental'))
#factory.addStep(ShellCommand(command=['make', 'test']))
factory.addStep(steps.PyFlakes(command=["sudo", "pyflakes", "CI_Folder/tests/calculator.py"]))
factory.addStep(ShellCommand(command=['bash','CI_Folder/script.sh']))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="CI",
      slavenames=["example-slave"],
      factory=factory))

#c['builders'].append(util.BuilderConfig(name="runtests", slavenames=["slave-unittests"], factory=factory2))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
import slack

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("ronet","pedo101")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))
#c['status'].append(html.WebStatus(http_port=8010, allowForce=True, change_hook_dialects={'base': True}))
c['status'].append(slack.SlackStatusPush("https://hooks.slack.com/services/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","http://161.202.178.170:8010","CI","ronetdeleon",True,True))
####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "CI Proof of Concepts"
c['titleURL'] = "https://161.202.178.170:8010"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://161.202.178.170:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
